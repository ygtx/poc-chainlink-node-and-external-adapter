type = "directrequest"
schemaVersion = 1
name = "original - hardhat oracle 2"
maxTaskDuration = "0s"
contractAddress = "YOUR_ORACLE_CONTRACT_ADDRESS"
evmChainID = "4"
minIncomingConfirmations = 0
observationSource = """

decode_log      [type="ethabidecodelog"
                abi="OracleRequest(bytes32 indexed specId, address requester, bytes32 requestId, uint256 payment, address callbackAddr, bytes4 callbackFunctionId, uint256 cancelExpiration, uint256 dataVersion, bytes data)"
                data="$(jobRun.logData)"
                topics="$(jobRun.logTopics)"]
                
decode_cbor     [type="cborparse" data="$(decode_log.data)"]

my_bridge_task  [type="bridge"
                name="generator"
                requestData="{\\"address\\": $(decode_cbor.adddress), \\"tokenId\\": $(decode_cbor.tokenId), \\"chain\\": $(decode_cbor.chain)}"
                ]

return_value    [type="jsonparse" path="data,found" data="$(my_bridge_task)"]

encode_data     [type="ethabiencode"
                abi="(bytes32 requestId, string value)"
                data="{\\"requestId\\": $(decode_log.requestId), \\"value\\": $(return_value)}"
                ]

encode_tx       [type="ethabiencode"
                abi="fulfillOracleRequest2(bytes32 requestId, uint256 payment, address callbackAddress, bytes4 callbackFunctionId, uint256 expiration, bytes calldata data)"
                data="{\\"requestId\\": $(decode_log.requestId), \\"payment\\": $(decode_log.payment), \\"callbackAddress\\": $(decode_log.callbackAddr), \\"callbackFunctionId\\": $(decode_log.callbackFunctionId), \\"expiration\\": $(decode_log.cancelExpiration), \\"data\\": $(encode_data)}"
                ]

submit_tx       [type="ethtx" to="YOUR_ORACLE_CONTRACT_ADDRESS"
                data="$(encode_tx)"
                ]

decode_log -> decode_cbor -> my_bridge_task -> return_value -> encode_data -> encode_tx -> submit_tx

"""